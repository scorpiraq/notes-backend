"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachMiddleware = exports.attachControllerInstances = exports.attachControllers = void 0;
const express_1 = require("express");
const di_1 = require("@decorators/di");
const meta_1 = require("./meta");
const middleware_1 = require("./middleware");
/**
 * Attach controllers to express application
 */
async function attachControllers(app, controllers) {
    const promises = controllers.map((controller) => registerController(app, controller, getController));
    await Promise.all(promises);
    // error middleware must be registered as the very last one
    app.use((0, middleware_1.errorMiddlewareHandler)());
}
exports.attachControllers = attachControllers;
/**
 * Attach controller instances to express application
 */
async function attachControllerInstances(app, controllers) {
    const promises = controllers.map((controller) => registerController(app, controller, (c) => c));
    await Promise.all(promises);
    // error middleware must be registered as the very last one
    app.use((0, middleware_1.errorMiddlewareHandler)());
}
exports.attachControllerInstances = attachControllerInstances;
/**
 * Register controller via registering new Router
 */
async function registerController(app, Controller, extractController) {
    const controller = await extractController(Controller);
    const meta = (0, meta_1.getMeta)(controller);
    const router = (0, express_1.Router)(meta.routerOptions);
    /**
     * Wrap all registered middleware with helper function
     * that can instantiate or get from the container instance of the class
     * or execute given middleware function
     */
    const routerMiddleware = (meta.middleware || [])
        .map(middleware => (0, middleware_1.middlewareHandler)(middleware));
    /**
     * Apply router middleware
     */
    if (routerMiddleware.length) {
        router.use(...routerMiddleware);
    }
    /**
     * Applying registered routes
     */
    for (const [methodName, methodMeta] of Object.entries(meta.routes)) {
        methodMeta.routes.forEach(route => {
            const routeMiddleware = (route.middleware || [])
                .map(middleware => (0, middleware_1.middlewareHandler)(middleware));
            const handler = routeHandler(controller, methodName, meta.params[methodName], methodMeta.status);
            router[route.method].apply(router, [
                route.url, ...routeMiddleware, handler,
            ]);
        });
    }
    app.use(meta.url, router);
    return app;
}
/**
 * Returns function that will call original route handler and wrap return options
 */
function routeHandler(controller, methodName, params, status) {
    return (req, res, next) => {
        const args = extractParameters(req, res, next, params);
        const result = controller[methodName].call(controller, ...args);
        if (result instanceof Promise) {
            result.then((r) => {
                if (!res.headersSent && typeof r !== 'undefined') {
                    if (status) {
                        res.status(status);
                    }
                    res.send(r);
                }
            }).catch(next);
        }
        else if (typeof result !== 'undefined') {
            if (!res.headersSent) {
                if (status) {
                    res.status(status);
                }
                res.send(result);
            }
        }
        return result;
    };
}
/**
 * Extract parameters for handlers
 */
function extractParameters(req, res, next, params = []) {
    const args = [];
    for (const { name, index, type } of params) {
        switch (type) {
            case meta_1.ParameterType.RESPONSE:
                args[index] = res;
                break;
            case meta_1.ParameterType.REQUEST:
                args[index] = getParam(req, null, name);
                break;
            case meta_1.ParameterType.NEXT:
                args[index] = next;
                break;
            case meta_1.ParameterType.PARAMS:
                args[index] = getParam(req, 'params', name);
                break;
            case meta_1.ParameterType.QUERY:
                args[index] = getParam(req, 'query', name);
                break;
            case meta_1.ParameterType.BODY:
                args[index] = getParam(req, 'body', name);
                break;
            case meta_1.ParameterType.HEADERS:
                args[index] = getParam(req, 'headers', name);
                break;
            case meta_1.ParameterType.COOKIES:
                args[index] = getParam(req, 'cookies', name);
                break;
        }
    }
    return args;
}
/**
 * Get controller instance from container or instantiate one
 */
function getController(Controller) {
    try {
        return di_1.Container.get(Controller);
    }
    catch (_a) {
        return new Controller();
    }
}
/**
 * Get parameter value from the source object
 */
function getParam(source, paramType, name) {
    const param = source[paramType] || source;
    return name ? param[name] : param;
}
/**
 * Attach middleware to controller metadata
 * @param {boolean} unshift if set to false all the custom decorator middlewares will be exectuted after the middlewares attached through controller
 *
 *
 * Note- Please use custom decorators before express method decorators Get Post etc.
 */
function attachMiddleware(target, property, middleware) {
    const meta = (0, meta_1.getMeta)(target);
    if (meta.url !== '') {
        meta.middleware.unshift(middleware);
    }
    else if (property in meta.routes) {
        meta.routes[property].routes[0].middleware.unshift(middleware);
    }
}
exports.attachMiddleware = attachMiddleware;
//# sourceMappingURL=data:application/json;base64,